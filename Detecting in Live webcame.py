# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cT-oYWDjh1jFdcsmwYFxxRtcNJbKOSPK
"""

import cv2,time
import numpy as np
from keras.models import load_model
#load the trained model
#input the path of the saved trained model
model = load_model('C:/Users/gopuj/Desktop/rajesh/model2-001.model')
 
#labeling the information
labels_dict = {0: 'without mask', 1: 'mask'}
color_dict = {0: (0,0,255), 1: (0,255,0)}

#loading the haarcascase claasifier inorder
#to detect the face clearly
#input the path of cascade file
face_cascade=cv2.CascadeClassifier('C:/Users/gopuj/Desktop/rajesh/Dataset/haarcascade_frontalface_default.xml')

#Opening the webcam using opencv
video=cv2.VideoCapture(0)

while True:
    #Here by using read() function we can get the frames from the webcam stream. 
    
    _,img=video.read()
    #To detect the images of varying size we use this function
    faces=face_cascade.detectMultiScale(img,1.1,4)

    for(x,y,w,h) in faces:
        #grabbing the co-ordinates of the image ina frame
        #face_img = img[x:x + w,y:y + h]
        face_img = img[y:y + w, x:x + w]

        #resizing the image
        resized = cv2.resize(face_img, (150, 150))
        normalized = resized / 255.0
        reshaped = np.reshape(normalized, (1, 150, 150, 3))
        reshaped = np.vstack([reshaped])
        result = model.predict(reshaped)
        
        # passing through the model to determine if the face has a mask or not
        label = np.argmax(result, axis=0)[1]

        #drawing the reactangle box around the face
        cv2.rectangle(img, (x, y), (x + w, y + h), color_dict[label], 2)
        cv2.rectangle(img, (x, y - 40), (x + w, y), color_dict[label], -1)
        #labeling the text on rectangluar box
        cv2.putText(img, labels_dict[label], (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)

    #displaying the resulting frame
    cv2.imshow("capture",img)
    key=cv2.waitKey(1)
    if key==ord('q'):#will exit the frame if we press 'q'
        break
#to clean the release the picture
video.release()
cv2.destroyAllWindows()









